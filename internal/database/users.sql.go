// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        id,
        created_at,
        updated_at,
        username,
        fullname,
        hashed_password,
        bio,
        avatar,
        email,
        api_key
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        encode(sha256(random()::text::bytea), 'hex')
    )
RETURNING id, created_at, updated_at, username, fullname, hashed_password, bio, avatar, email, api_key
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Username       string
	Fullname       string
	HashedPassword string
	Bio            sql.NullString
	Avatar         sql.NullString
	Email          string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Fullname,
		arg.HashedPassword,
		arg.Bio,
		arg.Avatar,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Fullname,
		&i.HashedPassword,
		&i.Bio,
		&i.Avatar,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, username, fullname, hashed_password, bio, avatar, email, api_key
FROM users
WHERE username = $1
    OR email = $2
`

type GetUserParams struct {
	Username string
	Email    string
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Fullname,
		&i.HashedPassword,
		&i.Bio,
		&i.Avatar,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, created_at, updated_at, username, fullname, hashed_password, bio, avatar, email, api_key
FROM users
WHERE api_key = $1
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Fullname,
		&i.HashedPassword,
		&i.Bio,
		&i.Avatar,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users
SET updated_at = NOW(),
    api_key = encode(sha256(random()::text::bytea), 'hex'),
    hashed_password = $2
WHERE id = $1
RETURNING id, created_at, updated_at, username, fullname, hashed_password, bio, avatar, email, api_key
`

type UpdatePasswordParams struct {
	ID             uuid.UUID
	HashedPassword string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.ID, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Fullname,
		&i.HashedPassword,
		&i.Bio,
		&i.Avatar,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE users
SET updated_at = NOW(),
    bio = COALESCE($2, bio),
    username = COALESCE($3, username),
    avatar = COALESCE($4, avatar),
    fullname = COALESCE($5, fullname),
    email = COALESCE($6, email)
WHERE id = $1
RETURNING id, created_at, updated_at, username, fullname, hashed_password, bio, avatar, email, api_key
`

type UpdateProfileParams struct {
	ID       uuid.UUID
	Bio      sql.NullString
	Username sql.NullString
	Avatar   sql.NullString
	Fullname sql.NullString
	Email    sql.NullString
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.ID,
		arg.Bio,
		arg.Username,
		arg.Avatar,
		arg.Fullname,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Fullname,
		&i.HashedPassword,
		&i.Bio,
		&i.Avatar,
		&i.Email,
		&i.ApiKey,
	)
	return i, err
}
