// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: follow_projects.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFollowProject = `-- name: CreateFollowProject :one
INSERT INTO follow_projects (id, created_at, updated_at, user_id, project_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, project_id
`

type CreateFollowProjectParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) CreateFollowProject(ctx context.Context, arg CreateFollowProjectParams) (FollowProject, error) {
	row := q.db.QueryRowContext(ctx, createFollowProject,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ProjectID,
	)
	var i FollowProject
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ProjectID,
	)
	return i, err
}

const deleteFollowProject = `-- name: DeleteFollowProject :exec
DELETE FROM follow_projects
WHERE project_id = $1
    AND user_id = $2
`

type DeleteFollowProjectParams struct {
	ProjectID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) DeleteFollowProject(ctx context.Context, arg DeleteFollowProjectParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollowProject, arg.ProjectID, arg.UserID)
	return err
}
