// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: diaries.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createDiary = `-- name: CreateDiary :one
INSERT INTO diaries (
        id,
        created_at,
        updated_at,
        datetime_exc,
        user_id,
        title,
        description,
        images,
        urls,
        icon,
        background
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, created_at, updated_at, datetime_exc, user_id, title, description, images, urls, icon, background
`

type CreateDiaryParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	DatetimeExc time.Time
	UserID      uuid.UUID
	Title       string
	Description sql.NullString
	Images      []string
	Urls        []string
	Icon        sql.NullString
	Background  sql.NullString
}

func (q *Queries) CreateDiary(ctx context.Context, arg CreateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, createDiary,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DatetimeExc,
		arg.UserID,
		arg.Title,
		arg.Description,
		pq.Array(arg.Images),
		pq.Array(arg.Urls),
		arg.Icon,
		arg.Background,
	)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DatetimeExc,
		&i.UserID,
		&i.Title,
		&i.Description,
		pq.Array(&i.Images),
		pq.Array(&i.Urls),
		&i.Icon,
		&i.Background,
	)
	return i, err
}

const deleteDiary = `-- name: DeleteDiary :exec
DELETE FROM diaries
WHERE id = $1
    AND user_id = $2
`

type DeleteDiaryParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteDiary(ctx context.Context, arg DeleteDiaryParams) error {
	_, err := q.db.ExecContext(ctx, deleteDiary, arg.ID, arg.UserID)
	return err
}

const getDiariesByUser = `-- name: GetDiariesByUser :many
SELECT id, created_at, updated_at, datetime_exc, user_id, title, description, images, urls, icon, background
FROM diaries
WHERE user_id = $1 OFFSET $2
LIMIT $3
`

type GetDiariesByUserParams struct {
	UserID uuid.UUID
	Offset int32
	Limit  int32
}

func (q *Queries) GetDiariesByUser(ctx context.Context, arg GetDiariesByUserParams) ([]Diary, error) {
	rows, err := q.db.QueryContext(ctx, getDiariesByUser, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Diary
	for rows.Next() {
		var i Diary
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DatetimeExc,
			&i.UserID,
			&i.Title,
			&i.Description,
			pq.Array(&i.Images),
			pq.Array(&i.Urls),
			&i.Icon,
			&i.Background,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiary = `-- name: UpdateDiary :one
UPDATE diaries
SET updated_at = NOW(),
    datetime_exc = COALESCE($3, datetime_exc),
    title = COALESCE($4, title),
    description = COALESCE($5, description),
    images = COALESCE($6, images),
    urls = COALESCE($7, urls),
    icon = COALESCE($8, icon),
    background = COALESCE($9, background)
WHERE id = $1 AND user_id = $2
RETURNING id, created_at, updated_at, datetime_exc, user_id, title, description, images, urls, icon, background
`

type UpdateDiaryParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	DatetimeExc sql.NullTime
	Title       sql.NullString
	Description sql.NullString
	Images      []string
	Urls        []string
	Icon        sql.NullString
	Background  sql.NullString
}

func (q *Queries) UpdateDiary(ctx context.Context, arg UpdateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, updateDiary,
		arg.ID,
		arg.UserID,
		arg.DatetimeExc,
		arg.Title,
		arg.Description,
		pq.Array(arg.Images),
		pq.Array(arg.Urls),
		arg.Icon,
		arg.Background,
	)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DatetimeExc,
		&i.UserID,
		&i.Title,
		&i.Description,
		pq.Array(&i.Images),
		pq.Array(&i.Urls),
		&i.Icon,
		&i.Background,
	)
	return i, err
}
