// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: habits.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createHabit = `-- name: CreateHabit :one
INSERT INTO habits (
        id,
        created_at,
        updated_at,
        title,
        creator,
        purpose,
        description,
        icon,
        background,
        images,
        urls,
        time_in_day,
        loop_week,
        loop_month,
        recommend_duration
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
RETURNING id, created_at, updated_at, title, creator, purpose, description, icon, background, images, urls, time_in_day, loop_week, loop_month, recommend_duration
`

type CreateHabitParams struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	UpdatedAt         time.Time
	Title             string
	Creator           uuid.UUID
	Purpose           sql.NullString
	Description       sql.NullString
	Icon              sql.NullString
	Background        sql.NullString
	Images            []string
	Urls              []string
	TimeInDay         time.Time
	LoopWeek          []int32
	LoopMonth         []int32
	RecommendDuration int32
}

func (q *Queries) CreateHabit(ctx context.Context, arg CreateHabitParams) (Habit, error) {
	row := q.db.QueryRowContext(ctx, createHabit,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Creator,
		arg.Purpose,
		arg.Description,
		arg.Icon,
		arg.Background,
		pq.Array(arg.Images),
		pq.Array(arg.Urls),
		arg.TimeInDay,
		pq.Array(arg.LoopWeek),
		pq.Array(arg.LoopMonth),
		arg.RecommendDuration,
	)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Creator,
		&i.Purpose,
		&i.Description,
		&i.Icon,
		&i.Background,
		pq.Array(&i.Images),
		pq.Array(&i.Urls),
		&i.TimeInDay,
		pq.Array(&i.LoopWeek),
		pq.Array(&i.LoopMonth),
		&i.RecommendDuration,
	)
	return i, err
}

const deleteHabit = `-- name: DeleteHabit :exec
DELETE FROM habits
WHERE id = $1 AND creator = $2
`

type DeleteHabitParams struct {
	ID      uuid.UUID
	Creator uuid.UUID
}

func (q *Queries) DeleteHabit(ctx context.Context, arg DeleteHabitParams) error {
	_, err := q.db.ExecContext(ctx, deleteHabit, arg.ID, arg.Creator)
	return err
}

const getHabits = `-- name: GetHabits :many
SELECT id, created_at, updated_at, title, creator, purpose, description, icon, background, images, urls, time_in_day, loop_week, loop_month, recommend_duration
FROM habits OFFSET $1
LIMIT $2
`

type GetHabitsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetHabits(ctx context.Context, arg GetHabitsParams) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, getHabits, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Creator,
			&i.Purpose,
			&i.Description,
			&i.Icon,
			&i.Background,
			pq.Array(&i.Images),
			pq.Array(&i.Urls),
			&i.TimeInDay,
			pq.Array(&i.LoopWeek),
			pq.Array(&i.LoopMonth),
			&i.RecommendDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHabitsByUser = `-- name: GetHabitsByUser :many
SELECT habits.id, habits.created_at, habits.updated_at, habits.title, habits.creator, habits.purpose, habits.description, habits.icon, habits.background, habits.images, habits.urls, habits.time_in_day, habits.loop_week, habits.loop_month, habits.recommend_duration
FROM habits
    JOIN follow_habits ON habits.id = follow_habits.habit_id
WHERE follow_habits.user_id = $1 OFFSET $2
LIMIT $3
`

type GetHabitsByUserParams struct {
	UserID uuid.UUID
	Offset int32
	Limit  int32
}

func (q *Queries) GetHabitsByUser(ctx context.Context, arg GetHabitsByUserParams) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, getHabitsByUser, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Creator,
			&i.Purpose,
			&i.Description,
			&i.Icon,
			&i.Background,
			pq.Array(&i.Images),
			pq.Array(&i.Urls),
			&i.TimeInDay,
			pq.Array(&i.LoopWeek),
			pq.Array(&i.LoopMonth),
			&i.RecommendDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHabit = `-- name: UpdateHabit :one
UPDATE habits
SET updated_at = NOW(),
    title = COALESCE($3, title),
    purpose = COALESCE($4, purpose),
    description = COALESCE($5, description),
    icon = COALESCE($6, icon),
    background = COALESCE($7, background),
    images = COALESCE($8, images),
    urls = COALESCE($9, urls),
    time_in_day = COALESCE($10, time_in_day),
    loop_week = COALESCE($11, loop_week),
    loop_month = COALESCE($12, loop_month),
    recommend_duration = COALESCE($13, recommend_duration)
WHERE id = $1 AND creator = $2
RETURNING id, created_at, updated_at, title, creator, purpose, description, icon, background, images, urls, time_in_day, loop_week, loop_month, recommend_duration
`

type UpdateHabitParams struct {
	ID                uuid.UUID
	Creator           uuid.UUID
	Title             sql.NullString
	Purpose           sql.NullString
	Description       sql.NullString
	Icon              sql.NullString
	Background        sql.NullString
	Images            []string
	Urls              []string
	TimeInDay         sql.NullTime
	LoopWeek          []int32
	LoopMonth         []int32
	RecommendDuration sql.NullInt32
}

func (q *Queries) UpdateHabit(ctx context.Context, arg UpdateHabitParams) (Habit, error) {
	row := q.db.QueryRowContext(ctx, updateHabit,
		arg.ID,
		arg.Creator,
		arg.Title,
		arg.Purpose,
		arg.Description,
		arg.Icon,
		arg.Background,
		pq.Array(arg.Images),
		pq.Array(arg.Urls),
		arg.TimeInDay,
		pq.Array(arg.LoopWeek),
		pq.Array(arg.LoopMonth),
		arg.RecommendDuration,
	)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Creator,
		&i.Purpose,
		&i.Description,
		&i.Icon,
		&i.Background,
		pq.Array(&i.Images),
		pq.Array(&i.Urls),
		&i.TimeInDay,
		pq.Array(&i.LoopWeek),
		pq.Array(&i.LoopMonth),
		&i.RecommendDuration,
	)
	return i, err
}
