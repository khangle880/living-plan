// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
        id,
        created_at,
        updated_at,
        datetime_exc,
        title,
        purpose,
        description,
        images,
        urls,
        status,
        user_id,
        project_id,
        parent_id
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id, created_at, updated_at, datetime_exc, title, purpose, description, images, urls, status, user_id, project_id, parent_id
`

type CreateTaskParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	DatetimeExc time.Time
	Title       string
	Purpose     sql.NullString
	Description sql.NullString
	Images      []string
	Urls        []string
	Status      StatusEnum
	UserID      uuid.UUID
	ProjectID   uuid.NullUUID
	ParentID    uuid.NullUUID
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DatetimeExc,
		arg.Title,
		arg.Purpose,
		arg.Description,
		pq.Array(arg.Images),
		pq.Array(arg.Urls),
		arg.Status,
		arg.UserID,
		arg.ProjectID,
		arg.ParentID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DatetimeExc,
		&i.Title,
		&i.Purpose,
		&i.Description,
		pq.Array(&i.Images),
		pq.Array(&i.Urls),
		&i.Status,
		&i.UserID,
		&i.ProjectID,
		&i.ParentID,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1 AND user_id = $2
`

type DeleteTaskParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.ExecContext(ctx, deleteTask, arg.ID, arg.UserID)
	return err
}

const getTasksByUser = `-- name: GetTasksByUser :many
SELECT id, created_at, updated_at, datetime_exc, title, purpose, description, images, urls, status, user_id, project_id, parent_id FROM tasks 
WHERE user_id = $1 OFFSET $2
LIMIT $3
`

type GetTasksByUserParams struct {
	UserID uuid.UUID
	Offset int32
	Limit  int32
}

func (q *Queries) GetTasksByUser(ctx context.Context, arg GetTasksByUserParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUser, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DatetimeExc,
			&i.Title,
			&i.Purpose,
			&i.Description,
			pq.Array(&i.Images),
			pq.Array(&i.Urls),
			&i.Status,
			&i.UserID,
			&i.ProjectID,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatus = `-- name: UpdateStatus :one
UPDATE tasks
SET status = $2
WHERE id = $1 AND user_id = $2
RETURNING id, created_at, updated_at, datetime_exc, title, purpose, description, images, urls, status, user_id, project_id, parent_id
`

type UpdateStatusParams struct {
	ID     uuid.UUID
	Status StatusEnum
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateStatus, arg.ID, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DatetimeExc,
		&i.Title,
		&i.Purpose,
		&i.Description,
		pq.Array(&i.Images),
		pq.Array(&i.Urls),
		&i.Status,
		&i.UserID,
		&i.ProjectID,
		&i.ParentID,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET updated_at = NOW(),
    datetime_exc = COALESCE($3, datetime_exc),
    title = COALESCE($4, title),
    purpose = COALESCE($5, purpose),
    description = COALESCE($6, description),
    images = COALESCE($7, images),
    urls = COALESCE($8, urls),
    project_id = COALESCE($9, project_id),
    parent_id = COALESCE($10, parent_id)
WHERE id = $1 AND user_id = $2
RETURNING id, created_at, updated_at, datetime_exc, title, purpose, description, images, urls, status, user_id, project_id, parent_id
`

type UpdateTaskParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	DatetimeExc sql.NullTime
	Title       sql.NullString
	Purpose     sql.NullString
	Description sql.NullString
	Images      []string
	Urls        []string
	ProjectID   uuid.NullUUID
	ParentID    uuid.NullUUID
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.UserID,
		arg.DatetimeExc,
		arg.Title,
		arg.Purpose,
		arg.Description,
		pq.Array(arg.Images),
		pq.Array(arg.Urls),
		arg.ProjectID,
		arg.ParentID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DatetimeExc,
		&i.Title,
		&i.Purpose,
		&i.Description,
		pq.Array(&i.Images),
		pq.Array(&i.Urls),
		&i.Status,
		&i.UserID,
		&i.ProjectID,
		&i.ParentID,
	)
	return i, err
}
